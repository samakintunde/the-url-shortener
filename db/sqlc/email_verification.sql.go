// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: email_verification.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const cleanExpiredEmailVerifications = `-- name: CleanExpiredEmailVerifications :exec
DELETE FROM email_verifications
WHERE expires_at < CURRENT_TIMESTAMP AND verified_at IS NULL
`

func (q *Queries) CleanExpiredEmailVerifications(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, cleanExpiredEmailVerifications)
	return err
}

const cleanExpiredEmailVerificationsForUserID = `-- name: CleanExpiredEmailVerificationsForUserID :exec
DELETE FROM email_verifications
WHERE user_id = ? AND expires_at < CURRENT_TIMESTAMP AND verified_at IS NULL
`

func (q *Queries) CleanExpiredEmailVerificationsForUserID(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, cleanExpiredEmailVerificationsForUserID, userID)
	return err
}

const completeEmailVerification = `-- name: CompleteEmailVerification :one
UPDATE email_verifications
SET verified_at = CURRENT_TIMESTAMP
WHERE user_id = ? AND email = ? AND code = ? AND expires_at > CURRENT_TIMESTAMP
RETURNING id, user_id, email, code, created_at, expires_at, verified_at
`

type CompleteEmailVerificationParams struct {
	UserID string
	Email  string
	Code   string
}

func (q *Queries) CompleteEmailVerification(ctx context.Context, arg CompleteEmailVerificationParams) (EmailVerification, error) {
	row := q.db.QueryRowContext(ctx, completeEmailVerification, arg.UserID, arg.Email, arg.Code)
	var i EmailVerification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.Code,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.VerifiedAt,
	)
	return i, err
}

const createEmailVerification = `-- name: CreateEmailVerification :one
INSERT INTO email_verifications (
    user_id,
    email,
    code,
    expires_at
) VALUES (
    ?, ?, ?, ?
) RETURNING id, user_id, email, code, created_at, expires_at, verified_at
`

type CreateEmailVerificationParams struct {
	UserID    string
	Email     string
	Code      string
	ExpiresAt time.Time
}

func (q *Queries) CreateEmailVerification(ctx context.Context, arg CreateEmailVerificationParams) (EmailVerification, error) {
	row := q.db.QueryRowContext(ctx, createEmailVerification,
		arg.UserID,
		arg.Email,
		arg.Code,
		arg.ExpiresAt,
	)
	var i EmailVerification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.Code,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.VerifiedAt,
	)
	return i, err
}

const deleteEmailVerification = `-- name: DeleteEmailVerification :exec
DELETE FROM email_verifications
WHERE id = ?
`

func (q *Queries) DeleteEmailVerification(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEmailVerification, id)
	return err
}

const getEmailVerification = `-- name: GetEmailVerification :one
SELECT id, user_id, email, code, created_at, expires_at, verified_at FROM email_verifications WHERE user_id = ? AND email = ? AND verified_at IS NULL
`

type GetEmailVerificationParams struct {
	UserID string
	Email  string
}

func (q *Queries) GetEmailVerification(ctx context.Context, arg GetEmailVerificationParams) (EmailVerification, error) {
	row := q.db.QueryRowContext(ctx, getEmailVerification, arg.UserID, arg.Email)
	var i EmailVerification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.Code,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.VerifiedAt,
	)
	return i, err
}

const getEmailVerificationByCode = `-- name: GetEmailVerificationByCode :one
SELECT id, user_id, email, code, created_at, expires_at, verified_at FROM email_verifications WHERE code = ? AND verified_at IS NULL
`

func (q *Queries) GetEmailVerificationByCode(ctx context.Context, code string) (EmailVerification, error) {
	row := q.db.QueryRowContext(ctx, getEmailVerificationByCode, code)
	var i EmailVerification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.Code,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.VerifiedAt,
	)
	return i, err
}

const getUserUnverifiedEmailVerifications = `-- name: GetUserUnverifiedEmailVerifications :many
SELECT id, user_id, email, code, created_at, expires_at, verified_at FROM email_verifications
WHERE user_id = ? AND verified_at IS NULL
`

func (q *Queries) GetUserUnverifiedEmailVerifications(ctx context.Context, userID string) ([]EmailVerification, error) {
	rows, err := q.db.QueryContext(ctx, getUserUnverifiedEmailVerifications, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EmailVerification
	for rows.Next() {
		var i EmailVerification
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Email,
			&i.Code,
			&i.CreatedAt,
			&i.ExpiresAt,
			&i.VerifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isEmailVerificationComplete = `-- name: IsEmailVerificationComplete :one
SELECT EXISTS(
    SELECT 1 FROM email_verifications
    WHERE user_id = ? AND email = ? AND verified_at IS NOT NULL
) AS is_verified
`

type IsEmailVerificationCompleteParams struct {
	UserID string
	Email  string
}

func (q *Queries) IsEmailVerificationComplete(ctx context.Context, arg IsEmailVerificationCompleteParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, isEmailVerificationComplete, arg.UserID, arg.Email)
	var is_verified int64
	err := row.Scan(&is_verified)
	return is_verified, err
}

const updateEmailVerification = `-- name: UpdateEmailVerification :one
UPDATE email_verifications
SET code = ? AND verified_at = ? AND expires_at = ?
WHERE id = ?
RETURNING id, user_id, email, code, created_at, expires_at, verified_at
`

type UpdateEmailVerificationParams struct {
	Code       string
	VerifiedAt sql.NullTime
	ExpiresAt  time.Time
	ID         int64
}

func (q *Queries) UpdateEmailVerification(ctx context.Context, arg UpdateEmailVerificationParams) (EmailVerification, error) {
	row := q.db.QueryRowContext(ctx, updateEmailVerification,
		arg.Code,
		arg.VerifiedAt,
		arg.ExpiresAt,
		arg.ID,
	)
	var i EmailVerification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.Code,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.VerifiedAt,
	)
	return i, err
}
